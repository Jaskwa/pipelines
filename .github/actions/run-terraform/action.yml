name: "Run Terraform"
description: "Setup Terraform for pipeline use, tf init, tf apply"
inputs:
  region:
    description: "The region to deploy into"
    required: true
  tooling-account:
    description: "The id of the tooling account"
    required: true
  project:
    description: "The name of the project."
    required: true
  account:
    description: "The name of the account."
    required: true
  state-key:
    description: "The key against which Terraform state will be stored."
    required: true
  dir:
    description: "The directory which contains the Terraform module to deploy."
    required: false
runs:
  using: "composite"
  steps:
    - name: Setup-Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.3
    - name: Create-Backend-Config
      working-directory: ${{ inputs.dir }}
      run: |
        echo 'bucket="state.terraform.${{ inputs.account }}.${{ inputs.project }}"' >> ./config.s3.tfbackend
        echo 'dynamodb_table="lock.state.terraform.${{ inputs.account }}.${{ inputs.project }}"' >> ./config.s3.tfbackend
        echo 'key="${{ inputs.state-key }}"' >> ./config.s3.tfbackend
      shell: bash
    - name: Terraform-Init
      working-directory: ${{ inputs.dir }}
      run: |
        terraform init -input=false -backend-config=./config.s3.tfbackend
      shell: bash
    - name: Create-Context-Config
      id: create-context-config
      working-directory: ${{ inputs.dir }}
      run: |
        echo TF_VAR_region='${{ inputs.region }}' >> $GITHUB_ENV
        echo TF_VAR_account='${{ inputs.account }}' >> $GITHUB_ENV
        echo TF_VAR_project='${{ inputs.project }}' >> $GITHUB_ENV
        echo TF_VAR_tooling_account='${{ inputs.tooling-account }}' >> $GITHUB_ENV
      shell: bash
    - name: Terraform-Apply
      working-directory: ${{ inputs.dir }}
      run: |
        terraform apply -input=false -auto-approve
      shell: bash
